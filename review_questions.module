<?php

/**
 * @file
 * Contains review_questions.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function review_questions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the review_questions module.
    case 'help.page.review_questions':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds functionality that allows the user to add review questions via a field collection on a per node basis.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_entity_view_alter().
 */
function review_questions_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Check if entity type is node.
  if ($entity->getEntityTypeId() == 'node') {
    // Only show if field_review_questions is displayed.
    if ($display->getComponent('field_review_questions')) {
      // Get enabled node types from config.
      $config = Drupal::config('review_questions.settings');
      $enabled_types = $config->get('node_types');
      if (!empty($enabled_types)) {
        $enabled_types = array_filter($enabled_types);
        // Check if bundle is one of the enabled types.
        if (in_array($entity->bundle(), $enabled_types)) {
          $current_user = Drupal::currentUser();
          // Show only for authenticated users.
          if ($current_user->id()) {
            // Remove default render array.
            $build['field_review_questions'] = [];
            // Check if field_review_questions has values.
            if ($entity->field_review_questions->getValue()) {
              // Get Review Questions and Answers form.
              $form = Drupal::formBuilder()
                ->getForm('\Drupal\review_questions\Form\ReviewQuestionsAnswersForm', $entity);
              $build['field_review_questions'] = $form;
            }
          }
          else {
            // Hide form for anonymous users.
            $build['field_review_questions']['#access'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function review_questions_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'answers_notification':
      // Get from email address from site config.
      $message['from'] = Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Answers submitted for : @title', ['@title' => $params['node_title']], $options);
      $message['body'][] =  Html::escape($params['message']);
      // Add headers to support html emails.
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
  }
}

/**
 * Implements hook_theme().
 */
function review_questions_theme($existing, $type, $theme, $path) {
  return [
    'review_questions_mail' => [
      'variables' => ['review_questions' => NULL],
    ],
  ];
}

/**
 * Prepares variables for answers mail templates.
 *
 * Default template: review-questions-mail.html.twig.
 *
 * @param array $variables
 *   An associative array containing the following keys:
 *   - questions: Array containing questions and answers.
 *   - user: User object who submitted answers.
 *   - node: Node entity to which question belongs.
 */
function template_preprocess_review_questions_mail(&$variables) {
  $review_questions = $variables['review_questions'];
  if ($review_questions['user']) {
    $account = $review_questions['user'];
    $variables['user_name'] = $account->getDisplayName();
    $variables['user_email'] = $account->getEmail();
  }
}
